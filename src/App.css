@property --gradient-angle {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: false;
}

/* now, we can animate this custom-property value */


:root{
    --clr-1:#052b2f;
    --clr-2:#073438;
    --clr-3:#0e4b50;
    --clr-4:#2d8f85;
    --clr-5:#637c54;
}

body{
    background: var(--clr-2);
    min-height: 100vh;
    display: grid;
    place-content: center;

}

.card{
    height: 60vh;
    aspect-ratio: 1/1.5;
    background: var(--clr-1);
    border-radius: 0.5rem;
    position: relative;
    /* positioned ancestor, position is relative here because this will the containing block for the pseudo elements that will have position absolute*/

}

.card::before,
.card::after {
    content:"";
    position: absolute;
    inset: -0.4rem;
    /* Absolute or Fixed Positioning: When an element is absolutely or fixed positioned, inset: 0 will make the element stretch to fill its nearest positioned ancestor (for absolute) or the viewport (for fixed). */
    /* background: var(--clr-5); */
    /* Now, make the background gradient-like */
    z-index: -1;
    background: conic-gradient(
        from var(--gradient-angle),
        var(--clr-3),
        var(--clr-4),
        var(--clr-5),
        var(--clr-4),
        var(--clr-3));
        /* Now pull this behind the actual card, use z-index */

    border-radius:inherit;
    /* add an animation declaration here, that's using that rotation animation*/
    animation: rotation 20s linear infinite;
}

.card::after{
    filter: blur(3.5rem);
}


/* now, we will use houdini and the @property */
/* used to register a custom property, gives more information to the browser on that custom property */

/* create a rotation animation */
@keyframes rotation{
    0% {  --gradient-angle:0deg; }
    100%{  --gradient-angle:360deg; }
}

